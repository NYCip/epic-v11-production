version: '3.8'

# Production Override Configuration for EPIC V11
# Enhances base docker-compose.yml with production settings

services:
  # Production Traefik with enhanced security
  traefik:
    command:
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
      - "--api.dashboard=false"  # Disable dashboard in production
      - "--entrypoints.web.http.redirections.entrypoint.to=websecure"
      - "--entrypoints.web.http.redirections.entrypoint.scheme=https"
      - "--certificatesresolvers.letsencrypt.acme.httpchallenge=true"
      - "--certificatesresolvers.letsencrypt.acme.httpchallenge.entrypoint=web"
      - "--certificatesresolvers.letsencrypt.acme.email=${TRAEFIK_LETSENCRYPT_EMAIL}"
      - "--certificatesresolvers.letsencrypt.acme.storage=/certificates/acme.json"
      - "--log.level=WARN"  # Reduce log verbosity
      - "--accesslog=true"
      - "--metrics.prometheus=true"
      - "--metrics.prometheus.addEntryPointsLabels=true"
      - "--metrics.prometheus.addServicesLabels=true"
    labels:
      - "traefik.enable=false"  # Hide Traefik API
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M

  # Production PostgreSQL with enhanced security
  postgres:
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      # Security hardening
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256 --auth-local=scram-sha-256"
    ports: []  # Remove external port exposure in production
    deploy:
      resources:
        limits:
          memory: 2G
        reservations:
          memory: 1G
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "3"

  # Production Redis with enhanced security
  redis:
    command: >
      redis-server 
      --requirepass ${REDIS_PASSWORD}
      --appendonly yes
      --appendfsync everysec
      --maxmemory 512mb
      --maxmemory-policy allkeys-lru
      --save 900 1
      --save 300 10
      --save 60 10000
    ports: []  # Remove external port exposure in production
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  # Production Control Panel with security hardening
  control_panel_backend:
    environment:
      DATABASE_URL: postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
      REDIS_URL: redis://:${REDIS_PASSWORD}@redis:6379
      JWT_SECRET: ${JWT_SECRET}
      ENVIRONMENT: production
      # Security settings
      SECURITY_HEADERS_ENABLED: ${SECURITY_HEADERS_ENABLED:-true}
      CSP_ENABLED: ${CSP_ENABLED:-true}
      HSTS_ENABLED: ${HSTS_ENABLED:-true}
      RATE_LIMIT_ENABLED: ${RATE_LIMIT_ENABLED:-true}
      SESSION_SECURE: ${SESSION_SECURE:-true}
      COOKIE_SAMESITE: ${COOKIE_SAMESITE:-strict}
      COOKIE_HTTPONLY: ${COOKIE_HTTPONLY:-true}
      # Monitoring
      LANGFUSE_HOST: http://langfuse:3000
      LANGFUSE_PUBLIC_KEY: ${LANGFUSE_PUBLIC_KEY}
      LANGFUSE_SECRET_KEY: ${LANGFUSE_SECRET_KEY}
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.control-panel.rule=Host(`${EPIC_DOMAIN}`) && PathPrefix(`/control`)"
      - "traefik.http.routers.control-panel.entrypoints=websecure"
      - "traefik.http.routers.control-panel.tls.certresolver=letsencrypt"
      - "traefik.http.services.control-panel.loadbalancer.server.port=8000"
      # Security headers
      - "traefik.http.routers.control-panel.middlewares=security-headers@docker"
      - "traefik.http.middlewares.security-headers.headers.customRequestHeaders.X-Forwarded-Proto=https"
      - "traefik.http.middlewares.security-headers.headers.sslRedirect=true"
      - "traefik.http.middlewares.security-headers.headers.stsSeconds=31536000"
      - "traefik.http.middlewares.security-headers.headers.stsIncludeSubdomains=true"
      - "traefik.http.middlewares.security-headers.headers.stsPreload=true"
    deploy:
      replicas: 2  # Run 2 instances for high availability
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3

  # Production AGNO Service
  agno_service:
    environment:
      DATABASE_URL: postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
      REDIS_URL: redis://:${REDIS_PASSWORD}@redis:6379
      ENVIRONMENT: production
      # LLM API Keys
      PHI_API_KEY: ${PHI_API_KEY}
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      ANTHROPIC_API_KEY: ${ANTHROPIC_API_KEY}
      GOOGLE_API_KEY: ${GOOGLE_API_KEY}
      # Service URLs
      CONTROL_PANEL_URL: http://control_panel_backend:8000
      MCP_SERVER_URL: http://mcp_server:8001
      LANGFUSE_HOST: http://langfuse:3000
      LANGFUSE_PUBLIC_KEY: ${LANGFUSE_PUBLIC_KEY}
      LANGFUSE_SECRET_KEY: ${LANGFUSE_SECRET_KEY}
    deploy:
      resources:
        limits:
          memory: 2G
        reservations:
          memory: 1G

  # Production MCP Server
  mcp_server:
    environment:
      DATABASE_URL: postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
      CONTROL_PANEL_URL: http://control_panel_backend:8000
      ENVIRONMENT: production
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M

  # Production Langfuse
  langfuse:
    environment:
      DATABASE_URL: postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/langfuse
      NEXTAUTH_SECRET: ${LANGFUSE_SECRET}
      SALT: ${LANGFUSE_SALT}
      NEXTAUTH_URL: https://langfuse.${EPIC_DOMAIN}
      LANGFUSE_ENABLE_EXPERIMENTAL_FEATURES: "false"  # Disable in production
      NODE_ENV: production
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.langfuse.rule=Host(`langfuse.${EPIC_DOMAIN}`)"
      - "traefik.http.routers.langfuse.entrypoints=websecure"
      - "traefik.http.routers.langfuse.tls.certresolver=letsencrypt"
      - "traefik.http.services.langfuse.loadbalancer.server.port=3000"
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M

  # Production n8n
  n8n:
    environment:
      - N8N_BASIC_AUTH_ACTIVE=true
      - N8N_BASIC_AUTH_USER=edward
      - N8N_BASIC_AUTH_PASSWORD=${N8N_PASSWORD}
      - WEBHOOK_URL=https://n8n.${EPIC_DOMAIN}
      - N8N_HOST=n8n.${EPIC_DOMAIN}
      - N8N_PORT=5678
      - N8N_PROTOCOL=https
      - NODE_ENV=production
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.n8n.rule=Host(`n8n.${EPIC_DOMAIN}`)"
      - "traefik.http.routers.n8n.entrypoints=websecure"
      - "traefik.http.routers.n8n.tls.certresolver=letsencrypt"
      - "traefik.http.services.n8n.loadbalancer.server.port=5678"

# Production volume configurations
volumes:
  postgres_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/epic-v11/data/postgres
  
  redis_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/epic-v11/data/redis

# Production network configuration
networks:
  epic_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16