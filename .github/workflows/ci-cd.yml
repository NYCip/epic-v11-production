name: EPIC V11 CI/CD Pipeline

on:
  push:
    branches: [ master, main, develop ]
  pull_request:
    branches: [ master, main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  security-scan:
    name: Security Vulnerability Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  lint-and-test:
    name: Lint and Test
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: pgvector/pgvector:pg16
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_USER: test_user
          POSTGRES_DB: epic_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Cache Python dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r control_panel_backend/requirements.txt
          pip install pytest pytest-asyncio httpx

      - name: Lint with flake8
        run: |
          pip install flake8
          flake8 control_panel_backend/app --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 control_panel_backend/app --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

      - name: Test with pytest
        env:
          DATABASE_URL: postgresql://test_user:test_password@localhost:5432/epic_test
          REDIS_URL: redis://localhost:6379
          JWT_SECRET: test_secret_key_for_ci_testing_only
        run: |
          cd control_panel_backend
          pytest tests/ -v --tb=short

  security-tests:
    name: Security Feature Tests
    runs-on: ubuntu-latest
    needs: [lint-and-test]
    
    services:
      postgres:
        image: pgvector/pgvector:pg16
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_USER: test_user
          POSTGRES_DB: epic_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r control_panel_backend/requirements.txt
          pip install pytest pytest-asyncio httpx

      - name: Run security feature tests
        env:
          DATABASE_URL: postgresql://test_user:test_password@localhost:5432/epic_test
          REDIS_URL: redis://localhost:6379
          JWT_SECRET: test_secret_key_for_ci_testing_only
        run: |
          python test_all_security_features.py

  build-and-push:
    name: Build and Push Docker Images
    runs-on: ubuntu-latest
    needs: [security-scan, lint-and-test, security-tests]
    if: github.event_name == 'push' && github.ref == 'refs/heads/master'
    
    permissions:
      contents: read
      packages: write

    strategy:
      matrix:
        service: [control_panel_backend, mcp_server, agno_service]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ github.repository }}/${{ matrix.service }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./${{ matrix.service }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build-and-push]
    if: github.event_name == 'push' && github.ref == 'refs/heads/master'
    environment: staging
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to staging
        run: |
          echo "üöÄ Deploying to staging environment"
          echo "This would typically connect to your staging server"
          echo "and run deployment commands"
          
      - name: Run staging smoke tests
        run: |
          echo "üß™ Running smoke tests on staging"
          echo "This would run basic health checks"

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [deploy-staging]
    if: github.event_name == 'push' && github.ref == 'refs/heads/master'
    environment: production
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to production
        run: |
          echo "üöÄ Deploying to production environment"
          echo "This would typically connect to your production server"
          echo "and run the deploy-production.sh script"
          
      - name: Run production health checks
        run: |
          echo "üè• Running production health checks"
          echo "This would verify all services are healthy"

      - name: Notify deployment success
        run: |
          echo "‚úÖ EPIC V11 successfully deployed to production!"
          echo "üéâ All security features verified and active"