version: '3.8'

services:
  # API Gateway
  traefik:
    image: traefik:v3.0
    container_name: epic_traefik
    restart: unless-stopped
    command:
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
      - "--api.dashboard=true"
      - "--entrypoints.web.http.redirections.entrypoint.to=websecure"
      - "--entrypoints.web.http.redirections.entrypoint.scheme=https"
      - "--certificatesresolvers.letsencrypt.acme.httpchallenge=true"
      - "--certificatesresolvers.letsencrypt.acme.httpchallenge.entrypoint=web"
      - "--certificatesresolvers.letsencrypt.acme.email=eip@iug.net"
      - "--certificatesresolvers.letsencrypt.acme.storage=/certificates/acme.json"
      - "--log.level=INFO"
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
      - "./certificates:/certificates"
    networks:
      - epic_network

  # PostgreSQL Database
  postgres:
    image: pgvector/pgvector:pg16
    container_name: epic_postgres
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-epic_admin}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB:-epic_v11}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./postgres/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-epic_admin} -d ${POSTGRES_DB:-epic_v11}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - epic_network

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: epic_redis
    restart: unless-stopped
    command: redis-server --requirepass ${REDIS_PASSWORD} --appendonly yes
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "--pass", "${REDIS_PASSWORD}", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - epic_network

  # Langfuse Monitoring
  langfuse:
    image: langfuse/langfuse:latest
    container_name: epic_langfuse
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      DATABASE_URL: postgresql://${POSTGRES_USER:-epic_admin}:${POSTGRES_PASSWORD}@postgres:5432/langfuse
      NEXTAUTH_SECRET: ${LANGFUSE_SECRET}
      SALT: ${LANGFUSE_SALT}
      NEXTAUTH_URL: https://langfuse.epic.pos.com
      LANGFUSE_ENABLE_EXPERIMENTAL_FEATURES: "true"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.langfuse.rule=Host(`langfuse.epic.pos.com`)"
      - "traefik.http.routers.langfuse.entrypoints=websecure"
      - "traefik.http.routers.langfuse.tls.certresolver=letsencrypt"
      - "traefik.http.services.langfuse.loadbalancer.server.port=3000"
    networks:
      - epic_network

  # Control Panel Backend
  control_panel_backend:
    build: ./control_panel_backend
    container_name: epic_control_panel
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      DATABASE_URL: postgresql://${POSTGRES_USER:-epic_admin}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB:-epic_v11}
      REDIS_URL: redis://:${REDIS_PASSWORD}@redis:6379
      JWT_SECRET: ${JWT_SECRET}
      LANGFUSE_HOST: http://langfuse:3000
      LANGFUSE_PUBLIC_KEY: ${LANGFUSE_PUBLIC_KEY}
      LANGFUSE_SECRET_KEY: ${LANGFUSE_SECRET_KEY}
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.control-panel.rule=Host(`epic.pos.com`) && PathPrefix(`/control`)"
      - "traefik.http.routers.control-panel.entrypoints=websecure"
      - "traefik.http.routers.control-panel.tls.certresolver=letsencrypt"
      - "traefik.http.services.control-panel.loadbalancer.server.port=8000"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - epic_network

  # AGNO Service (Board of Directors)
  agno_service:
    build: ./agno_service
    container_name: epic_agno
    restart: unless-stopped
    depends_on:
      control_panel_backend:
        condition: service_healthy
      mcp_server:
        condition: service_healthy
    environment:
      DATABASE_URL: postgresql://${POSTGRES_USER:-epic_admin}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB:-epic_v11}
      REDIS_URL: redis://:${REDIS_PASSWORD}@redis:6379
      # LLM API Keys
      PHI_API_KEY: ${PHI_API_KEY}
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      ANTHROPIC_API_KEY: ${ANTHROPIC_API_KEY}
      GOOGLE_API_KEY: ${GOOGLE_API_KEY}
      # Service URLs
      CONTROL_PANEL_URL: http://control_panel_backend:8000
      MCP_SERVER_URL: http://mcp_server:8001
      LANGFUSE_HOST: http://langfuse:3000
      LANGFUSE_PUBLIC_KEY: ${LANGFUSE_PUBLIC_KEY}
      LANGFUSE_SECRET_KEY: ${LANGFUSE_SECRET_KEY}
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.agno.rule=Host(`epic.pos.com`) && PathPrefix(`/agno`)"
      - "traefik.http.routers.agno.entrypoints=websecure"
      - "traefik.http.routers.agno.tls.certresolver=letsencrypt"
      - "traefik.http.services.agno.loadbalancer.server.port=8000"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - epic_network

  # MCP Server
  mcp_server:
    build: ./mcp_server
    container_name: epic_mcp
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      DATABASE_URL: postgresql://${POSTGRES_USER:-epic_admin}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB:-epic_v11}
      CONTROL_PANEL_URL: http://control_panel_backend:8000
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.mcp.rule=Host(`epic.pos.com`) && PathPrefix(`/mcp`)"
      - "traefik.http.routers.mcp.entrypoints=websecure"
      - "traefik.http.routers.mcp.tls.certresolver=letsencrypt"
      - "traefik.http.services.mcp.loadbalancer.server.port=8001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - epic_network

  # n8n Workflow Automation
  n8n:
    image: n8nio/n8n:latest
    container_name: epic_n8n
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      - N8N_BASIC_AUTH_ACTIVE=true
      - N8N_BASIC_AUTH_USER=edward
      - N8N_BASIC_AUTH_PASSWORD=${N8N_PASSWORD}
      - N8N_ENCRYPTION_KEY=${JWT_SECRET}
      - DB_TYPE=postgresdb
      - DB_POSTGRESDB_HOST=postgres
      - DB_POSTGRESDB_PORT=5432
      - DB_POSTGRESDB_DATABASE=n8n
      - DB_POSTGRESDB_USER=${POSTGRES_USER:-epic_admin}
      - DB_POSTGRESDB_PASSWORD=${POSTGRES_PASSWORD}
      - WEBHOOK_URL=https://n8n.epic.pos.com
    volumes:
      - n8n_data:/home/node/.n8n
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.n8n.rule=Host(`n8n.epic.pos.com`)"
      - "traefik.http.routers.n8n.entrypoints=websecure"
      - "traefik.http.routers.n8n.tls.certresolver=letsencrypt"
      - "traefik.http.services.n8n.loadbalancer.server.port=5678"
    networks:
      - epic_network

  # Frontend Control Panel
  frontend:
    build: ./frontend
    container_name: epic_frontend
    restart: unless-stopped
    depends_on:
      control_panel_backend:
        condition: service_healthy
    environment:
      NEXT_PUBLIC_API_URL: https://epic.pos.com
      NEXTAUTH_URL: https://epic.pos.com
      NEXTAUTH_SECRET: ${JWT_SECRET}
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.frontend.rule=Host(`epic.pos.com`)"
      - "traefik.http.routers.frontend.entrypoints=websecure"
      - "traefik.http.routers.frontend.tls.certresolver=letsencrypt"
      - "traefik.http.services.frontend.loadbalancer.server.port=3000"
      - "traefik.http.routers.frontend.priority=1"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/auth/providers"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - epic_network

networks:
  epic_network:
    external: true
    name: epic-v11_epic_network

volumes:
  postgres_data:
  redis_data:
  n8n_data: